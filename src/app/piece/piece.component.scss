
:host {
    --size-small: 0.5in;
    --size-medium-minus: 0.65in;
    --size-medium: 0.8in;
    --size-medium-plus: 1in;
    --size-large: 1.75in;
    --size-large-plus: 2in;
    --size-huge: 2.75in;
}

.piece-container {
    width: var(--size);
    border: var(--border-style);
    break-inside: avoid;

    &.size-small {
        --size: var(--size-small);
    }

    &.size-medium {
        --size: var(--size-medium);
    }

    &.size-medium-plus {
        --size: var(--size-medium-plus);
    }

    &.size-medium-minus {
        --size: var(--size-medium-minus);
    }

    &.size-large {
        --size: var(--size-large);
    }

    &.size-large-plus {
        --size: var(--size-large-plus);
    }

    &.size-huge {
        --size: var(--size-huge);
    }
}

.base {
    height: var(--size);
}

.insert-type .base {
    height: 0.15in;
}

.size-huge .base {
    height: calc(var(--size) / 2);
}

.image-container {
    --vertical-padding: calc(var(--size) * 0.1);
    --horizontal-padding: calc(var(--size) * 0.05);
    border-bottom: var(--border-style);
    padding: var(--vertical-padding) var(--horizontal-padding);
}

.flat-type .image-container {
    --horizontal-padding: 0.1in;
    --vertical-padding: 0.1in;
}

.block-type .image-container {
    --vertical-padding: 0;
}

.insert-type .image-container {
    // No fold lines near the bottom of insert pieces
    border-bottom: none;
}

.block-type .base {
    height: unset;

    /* We don't actually want to display the image, but instead use it's
     * height to set the size of the base. (which should match the sizze of
     * the top face) */
    img {
        opacity: 0;
        width: var(--size);
        height: auto;
    }
}

.flipped {
    transform: rotate(180deg);
    border-top: var(--border-style);
}

img {
    display: block; // Otherwise a little bottom padding is added
    width: 100%;
    height: auto;
    image-rendering: pixelated;
}
